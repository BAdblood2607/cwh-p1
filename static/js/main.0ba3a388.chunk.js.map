{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","concat","mode","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","split","length","App","setMode","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"mMAEe,SAASA,EAAOC,GAC7B,OAGEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAG,aACpCJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC1LV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,0BAC3CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBS,eAAa,OAAOR,KAAK,KAAG,SAE7DJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAAG,WAQtCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAS,+BAAAU,OAA8C,UAAbd,EAAMe,KAAgB,OAAO,UACxEd,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBY,QAAShB,EAAMiB,WAAYX,KAAK,WAAWY,KAAK,SAASN,GAAG,2BAChGX,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBe,QAAQ,0BAAwB,wBCzBjE,SAASC,EAASpB,GAC7B,IAkBCqB,EAKuBC,mBAAS,uBAAsBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAhDK,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAOpB,OACItB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYyB,MAAO,CAACC,MAAqB,UAAd9B,EAAMe,KAAkB,QAAU,UACxEd,EAAAC,EAAAC,cAAA,UAAKH,EAAM+B,SACX9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEXH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAe4B,MAAON,EAAMO,SArBzC,SAACC,GAEpBP,EAAQO,EAAMC,OAAOH,QAmBiEH,MAAO,CAACO,gBAA6B,UAAbpC,EAAMe,KAAgB,QAAQ,QAAUe,MAAqB,UAAd9B,EAAMe,KAAkB,QAAU,SAAUH,GAAG,QAAQyB,KAAK,OAGjNpC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBY,QAvC/B,WAElB,IAAIsB,EAAUZ,EAAKa,cACnBZ,EAAQW,KAoCgE,wBAChErC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwBY,QAnChC,WAElB,IAAIsB,EAAUZ,EAAKc,cACnBb,EAAQW,KAgCiE,wBACjErC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwBY,QA/BlC,WAGhBW,EADc,OA6ByD,eAGnE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkByB,MAAO,CAACC,MAAqB,UAAd9B,EAAMe,KAAkB,QAAU,UAC9Ed,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAIuB,EAAKe,MAAM,KAAKC,OAAM,cAAahB,EAAKgB,OAAM,gBACrDzC,EAAAC,EAAAC,cAAA,SAAI,KAAQuB,EAAKe,MAAM,KAAKC,OAAM,iBAClCzC,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIuB,EAAKgB,OAAO,EAAEhB,EAAK,+CCLxBiB,MArCf,WAAe,IAAAtB,EACWC,mBAAS,QAAOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAjCN,EAAIQ,EAAA,GAAEqB,EAAOrB,EAAA,GAYpB,OACEtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KAIE3B,EAAAC,EAAAC,cAACJ,EAAM,CAACgB,KAAMA,EAAME,WAhBL,WACJ,UAATF,GACF6B,EAAQ,QACRC,SAASC,KAAKjB,MAAMO,gBAAkB,UAItCQ,EAAQ,SACRC,SAASC,KAAKjB,MAAMO,gBAAkB,YAStCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAACiB,EAAQ,CAACW,QAAQ,6BAA6BhB,KAAMA,OCpB9CgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWhB,SAASiB,eAAe,SACpDC,OACH9D,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,WAAU,KACf/D,EAAAC,EAAAC,cAAC8D,EAAG,QAORlB","file":"static/js/main.0ba3a388.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n\r\n\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">WordCount</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">About</a>\r\n            </li>\r\n\r\n          </ul>\r\n          {/*<form className=\"d-flex\" role=\"search\" >\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form>*/}\r\n        <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n\r\n\r\n  )\r\n}","//vdo#7\r\nimport React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"uppercase was clicked \" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log(\"uppercase was clicked \" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n    const handleClear = () => {\r\n        // console.log(\"uppercase was clicked \" + text);\r\n        let newText = ' ';\r\n        setText(newText)\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onchange \");\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n    const [text, setText] = useState('Enter the text here');\r\n    //text = \"new text\"; wrng way to change state\r\n    //setText= \"new text\"; correct way to chnage state\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode=== 'light' ? 'white' : 'black'}} >\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='light'? 'black':'white' , color: props.mode=== 'light' ? 'white' : 'black'}} id=\"mybox\" rows=\"8\"></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert To UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2 \" onClick={handleLoClick} >Convert To LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2 \" onClick={handleClear} >Clear Text</button>\r\n            </div>\r\n\r\n            <div className=\"container  my-3\" style={{color: props.mode=== 'light' ? 'white' : 'black'}}>\r\n                <h2>Your text summary</h2>\r\n                <p><b>{text.split(\" \").length} words and {text.length} characters</b></p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something in the textbox to Preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport { useState } from 'react';\nimport React from \"react\";\n\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('dark');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'white';\n\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'black';\n    }\n  }\n  return (\n    <>\n\n\n\n      <Navbar mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n\n        <TextForm heading=\"Enter Your Text To Analyze\" mode={mode} />\n\n\n\n        {/*   <About />*/}\n\n\n\n\n      </div>\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}